[{"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/index.tsx":"1","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/App.tsx":"2","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/state/index.ts":"3","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/constants.ts":"4","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/state/reducer.ts":"5","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/state/state.tsx":"6","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/PatientListPage/index.tsx":"7","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/components/HealthRatingBar.tsx":"8","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/AddPatientModal/index.tsx":"9","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/AddPatientModal/AddPatientForm.tsx":"10","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/types.ts":"11","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/AddPatientModal/FormField.tsx":"12","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/PatientPage/index.tsx":"13","/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/utils.ts":"14"},{"size":302,"mtime":1606843476000,"results":"15","hashOfConfig":"16"},{"size":1795,"mtime":1607018690000,"results":"17","hashOfConfig":"16"},{"size":52,"mtime":1606843481000,"results":"18","hashOfConfig":"16"},{"size":55,"mtime":1606843475000,"results":"19","hashOfConfig":"16"},{"size":1979,"mtime":1607018731000,"results":"20","hashOfConfig":"16"},{"size":946,"mtime":1607018493000,"results":"21","hashOfConfig":"16"},{"size":2540,"mtime":1606973494000,"results":"22","hashOfConfig":"16"},{"size":630,"mtime":1606843474000,"results":"23","hashOfConfig":"16"},{"size":713,"mtime":1606843471000,"results":"24","hashOfConfig":"16"},{"size":3009,"mtime":1606843470000,"results":"25","hashOfConfig":"16"},{"size":1175,"mtime":1607017574000,"results":"26","hashOfConfig":"16"},{"size":2585,"mtime":1606843470000,"results":"27","hashOfConfig":"16"},{"size":2195,"mtime":1607020230000,"results":"28","hashOfConfig":"16"},{"size":1505,"mtime":1607020223000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1xypwm0",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/index.tsx",[],[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/App.tsx",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/state/index.ts",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/constants.ts",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/state/reducer.ts",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/state/state.tsx",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/PatientListPage/index.tsx",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/components/HealthRatingBar.tsx",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/AddPatientModal/index.tsx",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/AddPatientModal/AddPatientForm.tsx",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/types.ts",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/AddPatientModal/FormField.tsx",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/PatientPage/index.tsx",[],"/Users/Jenny/Desktop/Working/FullStack/fullstackopen2020/part9/patientor-frontend/src/utils.ts",["60","61","62","63","64","65"],"import { Gender, Patient, Entry } from \"./types\";\n\nconst isString = (text: any): text is string => {\n  return typeof text === \"string\" || text instanceof String;\n};\n\nconst parseToString = (text: any, paramName: string): string => {\n  if (!text || !isString(text)) {\n    throw new Error(`Incorrect or missing ${paramName}`);\n  }\n  return text;\n};\n\nconst isDate = (date: string): boolean => {\n  return Boolean(Date.parse(date));\n};\n\nconst parseDate = (date: any): string => {\n  if (!date || !isString(date) || !isDate(date)) {\n    throw new Error(`Incorrect or missing dateOfBirth`);\n  }\n  return date;\n};\n\nconst isGender = (gender: any): gender is Gender => {\n  return Object.values(Gender).includes(gender);\n};\n\nconst parseGender = (gender: any): Gender => {\n  if (!gender || !isGender(gender)) {\n    throw new Error(`Incorrect or missing gender`);\n  }\n  return gender;\n};\n\nconst toPatient = (object: any): Patient => {\n  const newPatient: Patient = {\n    name: parseToString(object.name, \"name\"),\n    dateOfBirth: parseDate(object.dateOfBirth),\n    ssn: parseToString(object.ssn, \"ssn\"),\n    occupation: parseToString(object.occupation, \"occupation\"),\n    gender: parseGender(object.gender),\n    id: parseToString(object.id, \"id\"),\n    entries: object.entries,\n  };\n  return newPatient;\n};\n\nexport default toPatient;\n",{"ruleId":"66","severity":1,"message":"67","line":3,"column":25,"nodeType":"68","messageId":"69","endLine":3,"endColumn":28,"suggestions":"70"},{"ruleId":"66","severity":1,"message":"67","line":7,"column":30,"nodeType":"68","messageId":"69","endLine":7,"endColumn":33,"suggestions":"71"},{"ruleId":"66","severity":1,"message":"67","line":18,"column":26,"nodeType":"68","messageId":"69","endLine":18,"endColumn":29,"suggestions":"72"},{"ruleId":"66","severity":1,"message":"67","line":25,"column":27,"nodeType":"68","messageId":"69","endLine":25,"endColumn":30,"suggestions":"73"},{"ruleId":"66","severity":1,"message":"67","line":29,"column":30,"nodeType":"68","messageId":"69","endLine":29,"endColumn":33,"suggestions":"74"},{"ruleId":"66","severity":1,"message":"67","line":36,"column":28,"nodeType":"68","messageId":"69","endLine":36,"endColumn":31,"suggestions":"75"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["76","77"],["78","79"],["80","81"],["82","83"],["84","85"],["86","87"],{"messageId":"88","fix":"89","desc":"90"},{"messageId":"91","fix":"92","desc":"93"},{"messageId":"88","fix":"94","desc":"90"},{"messageId":"91","fix":"95","desc":"93"},{"messageId":"88","fix":"96","desc":"90"},{"messageId":"91","fix":"97","desc":"93"},{"messageId":"88","fix":"98","desc":"90"},{"messageId":"91","fix":"99","desc":"93"},{"messageId":"88","fix":"100","desc":"90"},{"messageId":"91","fix":"101","desc":"93"},{"messageId":"88","fix":"102","desc":"90"},{"messageId":"91","fix":"103","desc":"93"},"suggestUnknown",{"range":"104","text":"105"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"104","text":"106"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"107","text":"105"},{"range":"107","text":"106"},{"range":"108","text":"105"},{"range":"108","text":"106"},{"range":"109","text":"105"},{"range":"109","text":"106"},{"range":"110","text":"105"},{"range":"110","text":"106"},{"range":"111","text":"105"},{"range":"111","text":"106"},[75,78],"unknown","never",[195,198],[456,459],[631,634],[741,744],[901,904]]